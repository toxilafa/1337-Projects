// main
   0x080484a7 <+0>:		push   ebp
   0x080484a8 <+1>:		mov    ebp,esp
   0x080484aa <+3>:		and    esp,0xfffffff0
   0x080484ad <+6>:		call   0x8048457 <n> // call function n
   0x080484b2 <+11>:	leave
   0x080484b3 <+12>:	ret

// n
   0x08048457 <+0>:		push   ebp
   0x08048458 <+1>:		mov    ebp,esp
   0x0804845a <+3>:		sub    esp,0x218 // set 536 bytes in the stack for the variables
   0x08048460 <+9>:		mov    eax,ds:0x8049804
   0x08048465 <+14>:	mov    DWORD PTR [esp+0x8],eax // variable 
   0x08048469 <+18>:	mov    DWORD PTR [esp+0x4],0x200 // variable with 512 bytes
   0x08048471 <+26>:	lea    eax,[ebp-0x208] // make eax point on ebp-0x208 as gets reqquire a pointer
   0x08048477 <+32>:	mov    DWORD PTR [esp],eax // variable for gets funcion
   0x0804847a <+35>:	call   0x8048350 <fgets@plt> // call fgets function
   0x0804847f <+40>:	lea    eax,[ebp-0x208] // point to ebp-0x208 as p neds a pointer variable
   0x08048485 <+46>:	mov    DWORD PTR [esp],eax // set variable for p
   0x08048488 <+49>:	call   0x8048444 <p> // call p function
   0x0804848d <+54>:	mov    eax,ds:0x8049810 // gwt the m variable
   0x08048492 <+59>:	cmp    eax,0x1025544 // compare m with the value 0x1025544 
   0x08048497 <+64>:	jne    0x80484a5 <n+78> // if not equal jump to the address 0x80484a5
   0x08048499 <+66>:	mov    DWORD PTR [esp],0x8048590 // variable for system
   0x080484a0 <+73>:	call   0x8048360 <system@plt> // call system
   0x080484a5 <+78>:	leave
   0x080484a6 <+79>:	ret

// p
   0x08048444 <+0>:		push   ebp
   0x08048445 <+1>:		mov    ebp,esp
   0x08048447 <+3>:		sub    esp,0x18 // set 14 in the stack for the variables in the function 
   0x0804844a <+6>:		mov    eax,DWORD PTR [ebp+0x8] // nove the argument passed to eax
   0x0804844d <+9>:		mov    DWORD PTR [esp],eax // variable for printf
   0x08048450 <+12>:	call   0x8048340 <printf@plt> // call printf and print the variable
   0x08048455 <+17>:	leave
   0x08048456 <+18>:	ret
